# syntax=docker/dockerfile:1
#FROM docker as stage_0
#COPY --from=docker/buildx-bin:latest /buildx /usr/libexec/docker/cli-plugins/docker-buildx
#RUN docker buildx version

# Captain! Is there any reason to be using the development image? I think not...
# It's just bigger... try to build it off of a different image?
from nvidia/cuda:11.8.0-devel-ubuntu20.04 as stage_1

run echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

run apt-get install -y -q

run apt update

# we need git and build essential

from stage_1 as stage_2

run apt update
run apt install -y git
run apt install -y libhdf5-dev
run apt install -y libnetcdf-dev
run apt install -y libnetcdf-c++4-dev


# no! bad!
#run git clone https://github.com/ORNL-Fusion/GITR.git

from stage_2 as stage_3

run apt install ninja-build
run apt install -y vim
run apt install -y libconfig-dev
run apt install -y libconfig++-dev

# how do we get catch2...
# still need libconfig
# still need cli11

from stage_3 as stage_4

# the only thing left to install is CLI11 and CMake
run DEBIAN_FRONTEND=noninteractive apt install -y gpg wget

# Captain! The only things left to do are:
# 0. CLI11 - just grind it out
# 1. CMake - you know how

from stage_4 as stage_5

# do all the package adding keys etc
run wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null

run echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null

run apt update

run rm /usr/share/keyrings/kitware-archive-keyring.gpg

run apt install kitware-archive-keyring

run DEBIAN_FRONTEND=noninteractive apt install -y cmake

# apt install -y cmake <--- should get you the newest version. See if this allows you to
# actually build gitr in a gpu container...

volume /host




















